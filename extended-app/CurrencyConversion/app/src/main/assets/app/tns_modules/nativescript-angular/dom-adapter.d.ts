import { Type } from "@angular/core";
import { ɵDomAdapter } from "@angular/platform-browser";
export declare class NativeScriptDomAdapter implements ɵDomAdapter {
    static makeCurrent(): void;
    hasProperty(_element: any, _name: string): boolean;
    log(arg: any): void;
    logError(arg: any): void;
    logGroup(arg: any): void;
    logGroupEnd(): void;
    attrToPropMap: {
        [key: string]: string;
    };
    resourceLoaderType: Type<any>;
    setProperty(_el: Element, _name: string, _value: any): any;
    getProperty(_el: Element, _name: string): any;
    invoke(_el: Element, _methodName: string, _args: any[]): any;
    contains(_nodeA: any, _nodeB: any): any;
    parse(_templateHtml: string): any;
    query(_selector: string): any;
    querySelector(_el: any, _selector: string): HTMLElement;
    querySelectorAll(_el: any, _selector: string): any[];
    on(_el: any, _evt: any, _listener: any): any;
    onAndCancel(_el: any, _evt: any, _listener: any): Function;
    dispatchEvent(_el: any, _evt: any): any;
    createMouseEvent(_eventType: any): any;
    createEvent(_eventType: string): any;
    preventDefault(_evt: any): any;
    isPrevented(_evt: any): boolean;
    getInnerHTML(_el: any): string;
    getTemplateContent(_el: any): any;
    getOuterHTML(_el: any): string;
    nodeName(_node: any): string;
    nodeValue(_node: any): string;
    type(_node: any): string;
    content(_node: any): any;
    firstChild(_el: any): Node;
    nextSibling(_el: any): Node;
    parentElement(_el: any): Node;
    childNodes(_el: any): Node[];
    childNodesAsList(_el: any): Node[];
    clearNodes(_el: any): any;
    appendChild(_el: any, _node: any): any;
    removeChild(_el: any, _node: any): any;
    replaceChild(_el: any, _newNode: any, _oldNode: any): any;
    remove(_el: any): Node;
    insertBefore(_el: any, _node: any): any;
    insertAllBefore(_el: any, _nodes: any): any;
    insertAfter(_el: any, _node: any): any;
    setInnerHTML(_el: any, _value: any): any;
    getText(_el: any): string;
    setText(_el: any, _value: string): any;
    getValue(_el: any): string;
    setValue(_el: any, _value: string): any;
    getChecked(_el: any): boolean;
    setChecked(_el: any, _value: boolean): any;
    createComment(_text: string): any;
    createTemplate(_html: any): HTMLElement;
    createElement(_tagName: any, _doc?: any): HTMLElement;
    createElementNS(_ns: string, _tagName: string, _doc?: any): Element;
    createTextNode(_text: string, _doc?: any): Text;
    createScriptTag(_attrName: string, _attrValue: string, _doc?: any): HTMLElement;
    createStyleElement(_css: string, _doc?: any): HTMLStyleElement;
    createShadowRoot(_el: any): any;
    getShadowRoot(_el: any): any;
    getHost(_el: any): any;
    getDistributedNodes(_el: any): Node[];
    clone(_node: Node): Node;
    getElementsByClassName(_element: any, _name: string): HTMLElement[];
    getElementsByTagName(_element: any, _name: string): HTMLElement[];
    classList(_element: any): any[];
    addClass(_element: any, _className: string): any;
    removeClass(_element: any, _className: string): any;
    hasClass(_element: any, _className: string): boolean;
    setStyle(_element: any, _styleName: string, _styleValue: string): any;
    removeStyle(_element: any, _styleName: string): any;
    getStyle(_element: any, _styleName: string): string;
    hasStyle(_element: any, _styleName: string, _styleValue?: string): boolean;
    tagName(_element: any): string;
    attributeMap(_element: any): Map<string, string>;
    hasAttribute(_element: any, _attribute: string): boolean;
    hasAttributeNS(_element: any, _ns: string, _attribute: string): boolean;
    getAttribute(_element: any, _attribute: string): string;
    getAttributeNS(_element: any, _ns: string, _attribute: string): string;
    setAttribute(_element: any, _name: string, _value: string): any;
    setAttributeNS(_element: any, _ns: string, _name: string, _value: string): any;
    removeAttribute(_element: any, _attribute: string): any;
    removeAttributeNS(_element: any, _ns: string, _attribute: string): any;
    templateAwareRoot(_el: any): any;
    createHtmlDocument(): HTMLDocument;
    defaultDoc(): HTMLDocument;
    getDefaultDocument(): Document;
    getBoundingClientRect(_el: any): any;
    getTitle(): string;
    setTitle(_doc: Document, _newTitle: string): any;
    elementMatches(_n: any, _selector: string): boolean;
    isTemplateElement(_el: any): boolean;
    isTextNode(_node: any): boolean;
    isCommentNode(_node: any): boolean;
    isElementNode(_node: any): boolean;
    hasShadowRoot(_node: any): boolean;
    isShadowRoot(_node: any): boolean;
    importIntoDoc(_node: Node): Node;
    adoptNode(_node: Node): Node;
    getHref(_element: any): string;
    getEventKey(_event: any): string;
    resolveAndSetHref(_element: any, _baseUrl: string, _href: string): any;
    supportsDOMEvents(): boolean;
    supportsNativeShadowDOM(): boolean;
    getGlobalEventTarget(_doc: Document, _target: string): any;
    getHistory(): History;
    getLocation(): Location;
    getBaseHref(): string;
    resetBaseElement(): void;
    getUserAgent(): string;
    setData(_element: any, _name: string, _value: string): any;
    getComputedStyle(_element: any): any;
    getData(_element: any, _name: string): string;
    setGlobalVar(_name: string, _value: any): any;
    supportsWebAnimation(): boolean;
    performanceNow(): number;
    getAnimationPrefix(): string;
    getTransitionEnd(): string;
    supportsAnimation(): boolean;
    supportsCookies(): boolean;
    getCookie(_name: string): string;
    setCookie(_name: string, _value: string): any;
}
